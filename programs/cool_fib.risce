section text
start:
    mov rsp, stack_start
    mov rbp, rsp
    mov r1, hello_message
    call print_string
    mov r16, 0
    mov r17, 1
.loop:
    add r18, r16, r17
    jb r18, r16, .end
    mov r1, r18
    call print_u32
    call print_newline
    mov r16, r17
    mov r17, r18
    jmp .loop
.end:
    mov r1, goodbye_message
    call print_string
.halt:
    jmp .halt


zero_bss:
    lui r1, high __bss_start
    add r1, low __bss_start
    lui r2, high __bss_end
    add r2, low __bss_end
.loop:
    jnb r1, r2, .end
    store r0, byte [r1]
    add r1, 1
    jmp .loop
.end:
    ret


print_string:
    # Pointer to string is in r1, null-terminated
    mov r2, 0 # The byte index
.loop:
    add r4, r1, r2
    load r5, byte [r4]
    add r2, 1
    jeq r5, r0, .end
    store r5, byte [terminal]
    jmp .loop
.end:
    ret

print_newline:
    mov r1, 10
    store r1, [terminal]
    ret


print_u32:
    enter r31, r16, r17, r18
    sub rsp, 11
    mov r16, r1
    mov r17, 9
.digit_loop:
    urem r2, r16, 10
    udiv r16, 10

    add r3, rsp, r17
    add r2, 48
    store r2, byte [r3]

    jeq r0, r16, .digit_loop_end
    jeq r0, r17, .digit_loop_end
    sub r17, 1
    jmp .digit_loop
.digit_loop_end:
    store r0, byte [rsp + 10]
    add r1, rsp, r17
    call print_string
    leave r31, r16, r17, r18
    ret


section data
hello_message db "Look at these awesome fibonacci numbers:", 10, 0
goodbye_message db "All done ^^", 10, 0


section bss
divisors resw 10


equ stack_start 0x20000 # The stack starts at the very end of ram
equ terminal -4 # The terminal is at the very last address
