start:
    call %load_program # Program first needs to be loaded from rom into ram so we can access unaligned data
    call %put_stuff_on_screen
.halt:
    jmp %.halt



load_program:
    mov r1, 0
    mov r5, program_end
    lui r2, high mem_at_start
    add r2, low mem_at_start
.loop:
    jnb r1, r5, %.end
    add r3, r1, r2
    load r4, [r1]
    store r4, [r3]
    add r1, 4
    jmp %.loop
.end:
    store r0, [0] # This write will trigger the memory map to change, making ram go from 0 to 0x10000
    # This is fine, since the program was just copied to ram.
    # Executions should continue as normal
    ret



put_stuff_on_screen:
    mov r4, 0 # Pixel Value
    mov r1, 0 # Column
    mov r2, 0 # Row
    lui r3, prep vga_enable $+4
    store r0, [rip + r3 + fin vga_enable]
.loop:
    mov r3, 256
    jnb r1, r3, %.next_line
    jnb r2, r3, %.end

    lui r6, prep vga $+4
    store r4, [rip + r6 + fin vga]

    add r4, 1
    add r1, 1
    jmp %.loop

.next_line:
    add r2, 1
    mov r1, 0
    jmp %.loop

.end:
    ret



program_end equ $
mem_at_start equ 0x10000

terminal equ 0x10000
vga equ terminal + 1
vga_enable equ vga + 1
